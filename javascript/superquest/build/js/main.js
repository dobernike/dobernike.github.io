(function () {
  'use strict';

  const render = (template) => {
    const wrapper = document.createElement(`div`);
    wrapper.innerHTML = template;
    return wrapper;
  };

  const mainElement = document.querySelector(`#main`);

  const changeScreen = (element) => {
    mainElement.innerHTML = ``;
    mainElement.appendChild(element);
  };

  /* eslint-disable object-curly-spacing */
  const render$1 = (html) => {
    const wrapper = document.createElement(`div`);
    wrapper.innerHTML = html.trim();
    return wrapper;
  };

  class AbstractView {
    constructor() {
      if (new.target === AbstractView) {
        throw new Error(`Can't instantiate AbstractView, only concrete one`);
      }
    }

    get template() {
      throw new Error(`Template is required`);
    }

    get element() {
      if (this._element) {
        return this._element;
      }
      this._element = this.render();
      this.bind(this._element);
      return this._element;
    }

    render() {
      return render$1(this.template);
    }

    bind() {
      // bind handlers if required
    }
  }

  class HeaderView extends AbstractView {
    constructor(state) {
      super();
      this.state = state;
    }

    get template() {
      return `<header class="header">
    <div>–ú–∏—Ä: ${this.state.level}</div>
    <div>–ñ–∏–∑–Ω–∏:
    ${new Array(3 - this.state.lives)
        .fill(`<span class="heart__empty">‚ô°</span>`).join(``)}
    ${new Array(this.state.lives)
        .fill(`<span class="heart__full">‚ô•</span>`).join(``)}
    </div>
    <div>–í—Ä–µ–º—è: ${this.state.time}</div>
    </header>`;
    }
  }

  /* eslint-disable object-curly-spacing */


  const ENTER_KEY_CODE = 13;


  class LevelView extends AbstractView {
    constructor(level) {
      super();
      this.level = level;
    }

    get template() {
      return `<div class="quest">
    <p class="text">${this.level.text}</p>

    <ul class="answers">
    ${this.level.answers.map((it) => `<li class="answer">${it.action.toUpperCase()}. ${it.title}</li>`).join(``)}
    </ul>
    <input type="text">
  </div>`;
    }

    bind() {
      const answersElement = this.element.querySelector(`.answers`);

      const answersElements = Array.from(answersElement.children);

      answersElement.addEventListener(`click`, (evt) => {
        const answerIndex = answersElements.indexOf(evt.target);
        const answer = this.level.answers[answerIndex];
        if (answer) {
          this.onAnswer(answer);

        }
      });

      this._answerInput = this.element.querySelector(`input`);
      this._answerInput.addEventListener(`keydown`, ({ keyCode }) => {
        if (keyCode === ENTER_KEY_CODE) {
          const current = this.level;
          const { value = `` } = this._answerInput;
          const userAnswer = value.toUpperCase();
          for (const answer of current.answers) {
            if (userAnswer === answer.action.toUpperCase()) {
              this.onAnswer(answer);
            }
          }
        }
      });
    }

    onAnswer() { }

    focus() {
      this._answerInput.focus();
    }
  }

  /* eslint-disable object-curly-spacing */
  const template = `<div>
<div class="result"></div>
<small>–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ <i>help</i></small>
</div>`;


  var footer = render(template);

  const INITIAL_GAME = Object.freeze({
    level: 0,
    lives: 3,
    time: 0
  });

  const Result = {
    NOOP: 0,
    DIE: 1,
    WIN: 2,
    NEXT_LEVEL: 3
  };

  const changeLevel = (game, level) => {
    if (typeof level !== `number`) {
      throw new Error(`Level should not be negative value`);
    }
    if (level < 0) {
      throw new Error(`Level should not be negative value`);
    }

    const newGame = Object.assign({}, game, {
      level
    });
    return newGame;
  };

  const die = (game) => {
    game.lives -= 1;
    return game;
  };

  /* eslint-disable object-curly-spacing */


  var QUEST = {
    'level-0': {
      text: `–í–∞—Å –∑–æ–≤—É—Ç –õ—É–∏–¥–∂–∏ –ú–∞—Ä–∏–æ, –≤—ã –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫, –Ω–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Å—Ç–æ–∏—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è –º–∏—Å—Å–∏—è ‚Äî —Å–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É
  –ì—Ä–∏–±–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –¢–æ–∞–¥—Å—Ç—É–ª –ü–∏—á. –ï—ë –ø–æ—Ö–∏—Ç–∏–ª –∑–ª–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–µ—Ä–µ–ø–∞—Ö –ë–æ—É–∑–µ—Ä –∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ì—Ä–∏–±–Ω–æ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ,
  —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å –ë–æ—É–∑–µ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –ø–µ—Ä–≤—ã–π –∑–∞–º–æ–∫, –Ω–æ, —á—Ç–æ–±—ã –≤ –Ω–µ–≥–æ –ø–æ–ø–∞—Å—Ç—å –Ω—É–∂–Ω–æ
  –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π. –í—ã —Å—Ç–æ–∏—Ç–µ –ø–æ—Å—Ä–µ–¥–∏ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —Ä–∞–≤–Ω–∏–Ω –ì—Ä–∏–±–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –∏ –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –Ω–∞ –≤–∞—Å
  —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–µ—Ç—Å—è —Ö–º—É—Ä—ã–π –≥—Ä–∏–± –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞. –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å`,
      answers: [
        {
          action: `left`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ª–µ–≤–æ, –æ—Ç –≥—Ä–∏–±–∞`,
          result: Result.DIE
        },
        {
          action: `right`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ø—Ä–∞–≤–æ, –ø—Ä—è–º–æ –Ω–∞ –≥—Ä–∏–±`,
          result: Result.DIE
        },
        {
          action: `jump`,
          title: `–í—ã –ø—Ä—ã–≥–Ω–∏—Ç–µ –≤–≤–µ—Ä—Ö`,
          result: Result.NEXT_LEVEL
        }
      ]
    },

    'level-1': {
      text: `–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É–≥—Ä–æ–∑–∞ –±—ã—Ç—å —É–±–∏—Ç—ã–º –≥—Ä–∏–±–æ–º –º–∏–Ω–æ–≤–∞–ª–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –æ–≥–ª—è–¥–µ—Ç—å—Å—è –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º. –í—ã –≤–∏–¥–∏—Ç–µ —á—Ç–æ –Ω–∞–¥ –≤–∞–º–∏ –ø—Ä—è–º–æ –≤ –¥–≤—É–º–µ—Ä–Ω–æ–º –Ω–µ–±–µ –≤–∏—Å—è—Ç –∫–∏—Ä–ø–∏—á–Ω—ã–µ –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏. –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø—Ä–∏–º–µ—Ç–µ?`,
      answers: [
        {
          action: `left`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ª–µ–≤–æ`,
          result: Result.DIE
        },
        {
          action: `right`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ø—Ä–∞–≤–æ`,
          result: Result.DIE
        },
        {
          action: `jump`,
          title: `–ö–∞–∫ —á—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ –ø–æ–¥–ø—Ä—ã–≥–Ω—É –∏ —Å–æ –≤—Å–µ–π —Å–∏–ª—ã —É–¥–∞—Ä—é—Å—å –≥–æ–ª–æ–≤–æ–π –æ –∂–µ–ª–µ–∑—è–∫—É!`,
          result: Result.NEXT_LEVEL
        }
      ]
    },

    'level-2': {
      text: `–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥ –∏ —Å–Ω–æ–≤–∞ –≤–∏–¥–∏—Ç–µ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –∫–∏—Ä–ø–∏—á–Ω—É—é –∫–ª–∞–¥–∫—É. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –Ω–æ–≤—ã–µ —Å–∏–ª—ã –∏ —Å–æ –≤—Å–µ–≥–æ —Ä–∞–∑–º–∞—Ö—É –±—å–µ—Ç–µ—Å—å –æ–± –Ω–µ–µ –≥–æ–ª–æ–≤–æ–π. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –∫–∏—Ä–ø–∏—á–∏ —Ä–∞–∑–ª–µ—Ç–∞—é—Ç—Å—è –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã. –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–¥–æ—Å—Ç–Ω–æ –ø—Ä—ã–≥–∞—Ç—å –∏ —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –≥–æ–ª–æ–≤–æ–π –≤—Å–µ –∫–∏—Ä–ø–∏—á–∏, –Ω–æ —Å–ª—É—á–∞–π–Ω–æ —É–¥–∞—Ä—è–µ—Ç–µ—Å—å –æ –µ—â–µ –æ–¥–Ω—É –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é —à—Ç—É–∫—É –∏ –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –∏–∑ –Ω–µ–µ –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç —Ü–≤–µ—Ç–æ–∫. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?`,
      answers: [
        {
          action: `left`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ª–µ–≤–æ`,
          result: Result.DIE
        },
        {
          action: `right`,
          title: `–í—ã –ø–æ–±–µ–∂–∏—Ç–µ –≤–ø—Ä–∞–≤–æ`,
          result: Result.DIE
        },
        {
          action: `1`,
          title: `–ö–æ–Ω–µ—á–Ω–æ –∂–µ —Å—ä–µ—Å—Ç—å –µ–≥–æ!`,
          result: Result.WIN
        }
      ]
    }
  };

  class GameOverView extends AbstractView {
    constructor(game) {
      super();
      this.game = game;
    }

    get template() {
      return `
<div>
<div class="end">
  <p>–í—ã –ø–æ–≥–∏–±–ª–∏ =(!</p>
  <p>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è?</p>
  <div class="repeat"><span class="repeat-action">–î–∞</span>|<span class="repeat-action">–ù–µ</span></div>
</div>
</div>`;
    }

    bind() {
      const repeatAction = this.element.querySelector(`.repeat-action`);
      repeatAction.addEventListener(`click`, () => {
        if (this.game.lives) {
          this.onRepeat();
        }
      });
    }

    onRepeat() { }
  }

  /* eslint-disable object-curly-spacing */


  const template$1 = `<div class="end">
<div class="scoreboard">
  <h1>–ú–æ–∏ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h1>

  <table class="scores">
    <tbody>
      <tr>
        <td>
          <small>1.</small>
        </td>
        <td style="text-align: right;">5 —Å–µ–∫</td>
        <td>????üíóüíó</td>
        <td>25.05.2018</td>
      </tr>
    </tbody>
  </table>
</div>
<br>
<div class="repeat"><span class="repeat-action">–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ</span>&nbsp;|&nbsp;<a class="repeat-action" href="https://google.com">–í—ã–π—Ç–∏</a>????</div>
</div>`;


  var scoreboard = render(template$1);

  /* eslint-disable object-curly-spacing */

  const ONE_SECOND = 1000; // 1000ms = 1s
  const gameContainerElement = render(``);
  const headerElement = render(``);
  const levelElement = render(``);

  // init game content
  gameContainerElement.appendChild(headerElement);
  gameContainerElement.appendChild(levelElement);
  gameContainerElement.appendChild(footer);

  let game;

  const tick = () => {
    game = Object.assign({}, game, {
      time: game.time + 1
    });
    updateHeader(game);
  };

  let timer;

  const startTimer = () => {
    timer = setTimeout(() => {
      tick();
      startTimer();
    }, ONE_SECOND);
  };

  const stopTimer = () => {
    clearTimeout(timer);
  };

  const getLevel = (state) => QUEST[`level-${state.level}`];

  const updateView = (container, view) => {
    container.innerHTML = ``;
    container.appendChild(view.element);
  };

  const showGameOver = (state) => {
    // const view = new GameOverView(getLevel(game));
    const view = new GameOverView(game);
    view.onRepeat = () => updateGame(state);
    updateView(levelElement, view);
  };

  const answerHandler = (answer) => {
    stopTimer();
    switch (answer.result) {
      case Result.NEXT_LEVEL:
        game = changeLevel(game, game.level + 1);
        updateGame(game);
        startTimer();
        break;
      case Result.DIE:
        game = die(game);
        showGameOver(game);
        break;
      case Result.WIN:
        changeScreen(scoreboard);
        break;
      case Result.NOOP:
        // just do nothing
        break;
      default:
        throw new Error(`Unknown result: ${answer.result}`);
    }
  };

  const updateHeader = (state) => {
    updateView(headerElement, new HeaderView(state));
  };

  const updateGame = (state) => {
    updateHeader(game);
    const levelView = new LevelView(getLevel(game));
    levelView.onAnswer = answerHandler;
    updateView(levelElement, levelView);
    levelView.focus();
  };


  const startGame = () => {
    game = Object.assign({}, INITIAL_GAME);

    updateGame(game);
    changeScreen(gameContainerElement);
    startTimer();
  };

  /* eslint-disable object-curly-spacing */


  const template$2 = `<div class="end">
<p>Ghbdtn! –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –í—ã –≥–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—Å—è —Å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?!<br>
  –ê?!<br>
  –¢–æ—á–Ω–æ?!<br>
  –£–≤–µ—Ä–µ–Ω?!<br>
  –°—Ç–æ–ø—É–¥–æ–≤?!</p>
<p>08 –µ—Å—Ç—å?</p>
<div class="repeat">
  –í–∞—à–µ –∏–º—è:<input type="text"><br>
  <span class="repeat-action">–î–∞</span>
</div>
</div>`;

  const element = render(template$2);

  const agreeButton = element.querySelector(`.repeat-action`);

  agreeButton.addEventListener(`click`, () => {
    startGame();
  });

  changeScreen(element);

}());

//# sourceMappingURL=main.js.map
