(function () {
  'use strict';

  const render = (template) => {
    const wrapper = document.createElement(`div`);
    wrapper.innerHTML = template.trim();
    return wrapper;
  };

  const mainElement = document.querySelector(`#main`);

  const changeScreen = (element) => {
    mainElement.innerHTML = ``;
    // element.forEach((it) => {
    mainElement.appendChild(element);
    // });

  };

  // import { render } from './util.js';
  // import { initialState } from './data/data.js';
  // const headerTemplate =
  var header = (state) => `<header class="header">
<div>–ú–∏—Ä: ${state.level}</div>
<div>–ñ–∏–∑–Ω–∏:
${new Array(3 - state.lives)
    .fill(`<span class="heart__empty">‚ô°</span>`).join(``)}
${new Array(state.lives)
    .fill(`<span class="heart__full">‚ô•</span>`).join(``)}
</div>
<div>–í—Ä–µ–º—è: ${state.time}</div>
</header>`;

  // export default render(headerTemplate(initialState));

  const initialState = {
    level: `level-0`,
    lives: 3,
    time: 0
  };

  const levels = {
    'level-0': {
      description: `–í–∞—Å –∑–æ–≤—É—Ç –õ—É–∏–¥–∂–∏ –ú–∞—Ä–∏–æ, –≤—ã –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫, –Ω–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Å—Ç–æ–∏—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è –º–∏—Å—Å–∏—è ‚Äî —Å–ø–∞—Å—Ç–∏ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É
  –ì—Ä–∏–±–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –¢–æ–∞–¥—Å—Ç—É–ª –ü–∏—á. –ï—ë –ø–æ—Ö–∏—Ç–∏–ª –∑–ª–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å —á–µ—Ä–µ–ø–∞—Ö –ë–æ—É–∑–µ—Ä –∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ì—Ä–∏–±–Ω–æ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ,
  —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å –ë–æ—É–∑–µ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –ø–µ—Ä–≤—ã–π –∑–∞–º–æ–∫, –Ω–æ, —á—Ç–æ–±—ã –≤ –Ω–µ–≥–æ –ø–æ–ø–∞—Å—Ç—å –Ω—É–∂–Ω–æ
  –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π. –í—ã —Å—Ç–æ–∏—Ç–µ –ø–æ—Å—Ä–µ–¥–∏ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —Ä–∞–≤–Ω–∏–Ω –ì—Ä–∏–±–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –∏ –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –Ω–∞ –≤–∞—Å
  —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–µ—Ç—Å—è —Ö–º—É—Ä—ã–π –≥—Ä–∏–± –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞. –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å`,
      answers: {
        'left': null,
        'jump': null,
        'right': `level-1`
      }
    },

    'level-1': {
      description: `–ò –≤–æ—Ç –≤—ã —Å–ø—Ä–∞–≤–∞. –¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø–æ—Ö–æ–∂–µ, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥`,
      answers: {
        'left': `level-0`
      }
    }
  };

  const INITIAL_GAME = Object.freeze({
    level: 0,
    lives: 2,
    time: 0
  });

  /* eslint-disable object-curly-spacing */

  const template = `<div>
<header class="header">
  <div>–ú–∏—Ä: 0</div>
  <div>–ñ–∏–∑–Ω–∏: <span class="heart__empty">‚ô°</span>
    <span class="heart__full">üñ§</span>
    <span class="heart__full">üñ§</span>
  </div>
  <div>–í—Ä–µ–º—è: 2</div>
</header>
</div>
<div>
<div class="end">
  <p>–í—ã –ø–æ–≥–∏–±–ª–∏ =(!</p>
  <p>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è?</p>
  <div class="repeat"><span class="repeat-action">–î–∞</span>|<span class="repeat-action">–ù–µ</span></div>
</div>
</div>
<div>
<div class="result"></div>
<small>–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ <i>help</i></small>
</div>`;

  render(template);

  /* eslint-disable object-curly-spacing */


  const screenTemplate = (lvl) => `
<div>
<div class="quest">
  <p class="text">
  ${lvl.description}
  </p>
  <input type="text">
  <ul class="answers">
    ${[...Object.entries(lvl.answers)].map(([answer]) => `<li class="answer"> ${answer.toUpperCase()}</li>`).join(``)}
  </ul>
</div>
</div>
<div>
<div class="result"></div>
<small>–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ <i>help</i></small>
</div>`;

  const renderScreen = (state) => {
    mainElement.innerHTML = ``;
    mainElement.appendChild(render(header(state)));
    mainElement.appendChild(render(screenTemplate(levels[state.level])));

    const input = document.querySelector(`input`);
    input.onkeydown = (evt) => {
      if (evt.key === `Enter`) {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
        const userAnswer = input.value.trim();
        const destination = userAnswer.toLowerCase() in levels[state.level].answers ? levels[state.level].answers[userAnswer] : null;
        // input.value = ``;
        if (destination) {
          renderScreen(Object.assign({}, state, {
            'level': destination
          }));
          // renderScreen()
        }
      }
    };
  };

  var gameScreen = () => renderScreen(initialState);

  const template$1 = `<div class="end">
<p>Ghbdtn! –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –í—ã –≥–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—Å—è —Å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?!<br>
  –ê?!<br>
  –¢–æ—á–Ω–æ?!<br>
  –£–≤–µ—Ä–µ–Ω?!<br>
  –°—Ç–æ–ø—É–¥–æ–≤?!</p>
<p>08 –µ—Å—Ç—å?</p>
<div class="repeat">
  –í–∞—à–µ –∏–º—è:<input type="text"><br>
  <span class="repeat-action">–î–∞</span>
</div>
</div>`;

  const element = render(template$1);

  const agreeButton = element.querySelector(`.repeat-action`);

  agreeButton.addEventListener(`click`, () => {
    gameScreen();
  });

  // for development

  // import welcomeScreen from './game-screen.js';

  changeScreen(element);

}());

//# sourceMappingURL=main.js.map
